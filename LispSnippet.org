#+PROPERTY: header-args :tangle ./LispSnippet.el

- C-c C-c: Evaluate block code, le resutat s'affiche en tant que bloc result
- C-x C-e: Evalue une ligne lisp (dans n'importe quel buffer, le resultat est dans mini buffer
- C-j : Evalue dans scratch pad
- C-h k key-sequence
  
* Biblio

https://www.youtube.com/@tonyaldon/videos
https://irfu.cea.fr/Pisp/frederic.galliano/


* Affiche le repertoire de conf. d'Emacs
#+begin_src elisp :tangle yes 
(message user-emacs-directory)
#+end_src

#+RESULTS:
: ~/.emacs.d/

* Load init.el
#+begin_src elisp :tangle yes
  (defun rg-load-init()
  "Fonction chargeant le fichier de ini.el"
  (interactive)
    (load-file (concat user-emacs-directory "init.el")))
#+end_src

#+RESULTS:
: load-init

* Write to a buffer
#+begin_src elisp :tangle yes
  (get-buffer-create "Remi")
  (defun rg-write-buffer(filename)
  " Give some infos"
  (interactive "fFile name: ")
  (with-current-buffer "Remi"
    (goto-char (point-max))
    (insert "Hello World " ))))
#+end_src

#+RESULTS:
: remi-file-info

* Echo current buffer
#+begin_src elisp :tangle yes
  (defun rg-echo-current-buffer-filename (f)
    (interactive (list (buffer-file-name)))
;;    (message "Current buffer filename is %s" f)
    (message "bla " ))
    
#+end_src

#+RESULTS:
: echo-current-buffer-filename

* Select and open file
#+begin_src elisp :tangle yes
      (defun rg-select-file (filename)
	(interactive "fFile name: ")
	(switch-to-buffer (find-file-noselect filename))
	)
#+end_src

#+RESULTS:
: remi-select-file
* Process File
#+begin_src elisp :tangle yes
  (defun rg-process-file (filename)
    (interactive  "fFile name: ")
    (remi-select-file filename)
    (setq firstword (buffer-substring 0 2))
    (setq info (list (count-lines-page) "blabla" firstword))
    (message "%S" info)
    )
#+end_src


#+RESULTS:
: remi-process-file

* Select current line
From https://irfu.cea.fr/Pisp/frederic.galliano//Computing/manual_elisp :tangle yes.pdf

#+begin_src elisp :tangle yes
  (defun rg-select-current-line ()
  "Select the current line"
  (interactive)
  (let ((pos (line-beginning-position)))
  (end-of-line)
  (set-mark pos))
  )
#+end_src

#+RESULTS:
: select-current-line


https://irfu.cea.fr/Pisp/frederic.galliano/

* Select Curent Word
#+begin_src elisp :tangle yes
  (defun rg-select-current-word ()
  "Select the word under cursor.
  “word” here is considered any alphanumeric sequence with “_” or “-”."
  (interactive)
  (let (pt)
  (skip-chars-backward "-_A-Za-z0-9")
  (setq pt (point))
  (skip-chars-forward "-_A-Za-z0-9")
  (set-mark pt)))
#+end_src

#+RESULTS:
: select-current-word

* Modify the content of a file
#+begin_src elisp :tangle yes
  (let ((buff (find-file-noselect "./sample.txt")))
    (with-current-buffer buff
      (goto-char (point-min))
      (insert "blablba\n")
      (goto-char (point-max))
      (insert "blablba\n")
      (save-buffer))
    (kill-buffer buff))
#+end_src

#+RESULTS:

* Display occurence of current word
#+begin_src elisp :tangle yes
  (defun rg-occurence ()
    "Display occurence of current word"
    (interactive)
    (setq myreg (current-word))
    (message "%s: %s" myreg (how-many myreg)))
#+end_src

* Flush lines
#+begin_src elisp :tangle yes
  (defun rg-flush ()
    "Display occurence of current word"
    (interactive)
    (setq myreg (current-word))
    (flush-lines myreg))
#+end_src

#+RESULTS:
: remi-flush

* Create term
#+begin_src elisp :tangle yes
  (defun rg-create-term ()
    " Create term"
    (interactive)
    (split-window-right)
    (windmove-right)
    (term "/bin/bash"))
#+end_src

#+RESULTS:
: remi-create-term

* Liste des fichiers terminant en .txt dans le dossier courant
#+begin_src elisp :tangle yes
(directory-files "." t ".txt$")
#+end_src

https://gigamonkeys.com/book/
